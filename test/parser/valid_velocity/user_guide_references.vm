#set($myarray = [0, 1, 2])
## References and tags
<span>pre</span> $myarray.isEmpty() <span>or</span> $myarray.empty <span>post</span>

#set($bar = "bar")
## References and text
pre $myarray.isEmpty() or $myarray.empty post
$myarray.size()
prefix${bar}suffix
prefix$bar
$bar!suffix

## New lines
$myarray.set(
  1, 
  'test'
)

## Nested
#set($my = {"deeply": {"deeply": {"deeply": {"deeply": {"deeply": {"deeply": {"deeply": {"nested": {"property": "foo" }}}}}}}}})
$my.deeply.deeply.deeply.deeply.deeply.deeply.deeply.nested.property


## Allowed names
#set($mudSlinger = "mudSlinger")
#set($mud_slinger = "mud_slinger")
#set($mudSlinger1 = "mudSlinger1")

## Property vs function access
$customer.Address or $customer.getAddress()
$purchase.Total or $purchase.getTotal()

$page.setTitle( "My Home Page" )
$person.setAttributes( ["Strange", "Weird", "Excited"] )

## Call chain
$app.getCustomer().getAddress().getStreet().getStreetNumer().toString().replace("1", "2").substring(0, 2).size()

$sun.setPlanets('Earth', 'Mars', 'Neptune')
$sun.setPlanets('Mercury')
$sun.setPlanets()

#set($foo = [0, 1, 2])
#set($i = 0)
#set($bar = {"bar": [1, {"junk": "junk"}]})
#set($map = {"apple": [1, 2, 3, 4, 5], "peach": "peach"})
## Index notation
$foo[0]       ## $foo takes in an Integer look up
Output that should remain in document
$foo[$i]      ## Using another reference as the index   
Output that should remain in document
$bar["bar"]   ## Passing a string where $foo may be a Map
Output that should remain in document
$bar.bar[1].junk
Output that should remain in document
$map.peach.toString()
Output that should remain in document
$map["apple"][4]
#set($map.apple[0] = 1)
#set($map["peach"] = "orange")

## Formal and quite reference
${mudSlinger}
${customer.Address}
${purchase.getTotal()}
My name is ${name|'John Doe'}

#set($myKeyName = "apple")
$map.get(${myKeyName})

#set($email = "email@domain")
<p>Send a $email!</p>
<p>Send a $!email!</p>
<p>Send a $!{email}</p>

#set($end = true)
## End with reference
$end
=====================================output=====================================
#set($myarray = [0, 1, 2])
## References and tags
<span>pre</span> $myarray.isEmpty() <span>or</span> $myarray.empty
<span>post</span>

#set($bar = "bar")
## References and text
pre $myarray.isEmpty() or $myarray.empty post
$myarray.size()
prefix${bar}suffix prefix$bar
$bar!suffix

## New lines
$myarray.set(
  1, 
  'test'
)

## Nested
#set($my = {"deeply": {"deeply": {"deeply": {"deeply": {"deeply": {"deeply": {"deeply": {"nested": {"property": "foo" }}}}}}}}})
$my.deeply.deeply.deeply.deeply.deeply.deeply.deeply.nested.property

## Allowed names
#set($mudSlinger = "mudSlinger")
#set($mud_slinger = "mud_slinger")
#set($mudSlinger1 = "mudSlinger1")

## Property vs function access
$customer.Address
or $customer.getAddress()
$purchase.Total
or $purchase.getTotal()

$page.setTitle( "My Home Page" )
$person.setAttributes( ["Strange", "Weird", "Excited"] )

## Call chain
$app.getCustomer().getAddress().getStreet().getStreetNumer().toString().replace("1", "2").substring(0, 2).size()

$sun.setPlanets('Earth', 'Mars', 'Neptune')
$sun.setPlanets('Mercury')
$sun.setPlanets()

#set($foo = [0, 1, 2])
#set($i = 0)
#set($bar = {"bar": [1, {"junk": "junk"}]})
#set($map = {"apple": [1, 2, 3, 4, 5], "peach": "peach"})
## Index notation
$foo[0] ## $foo takes in an Integer look up
Output that should remain in document
$foo[$i] ## Using another reference as the index
Output that should remain in document
$bar["bar"] ## Passing a string where $foo may be a Map
Output that should remain in document
$bar.bar[1].junk
Output that should remain in document
$map.peach.toString()
Output that should remain in document
$map["apple"][4]
#set($map.apple[0] = 1)
#set($map["peach"] = "orange")

## Formal and quite reference
${mudSlinger}
${customer.Address}
${purchase.getTotal()}
My name is ${name|'John Doe'}

#set($myKeyName = "apple")
$map.get(${myKeyName})

#set($email = "email@domain")
<p>Send a $email!</p>
<p>Send a $!email!</p>
<p>Send a $!{email}</p>

#set($end = true)
## End with reference
$end